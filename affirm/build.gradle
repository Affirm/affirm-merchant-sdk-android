apply plugin: 'com.android.library'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode VERSION_CODE.toInteger()
        versionName project.VERSION_NAME

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable 'HardcoedText', 'ContentDescription'
    }

    lintOptions {
        abortOnError false
    }
}

pmd {
    toolVersion = '5.5.2'
}

findbugs {
    toolVersion = "3.0.1"
}

checkstyle {
    toolVersion = '7.3'
}

task findbugs(type: FindBugs) {
    excludeFilter file('config/findbugs/exclude.xml')
    classes = files("$project.buildDir/intermediates/classes")
    source = fileTree('src/main/java')
    classpath = files()
    effort = 'max'
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task pmd(type: Pmd) {
    ruleSets = ["java-android",
                "java-basic",
                "java-braces",
                "java-strings",
                "java-unnecessary",
                "java-unusedcode",
                "java-sunsecure"]
    source = fileTree('src/main/java')
}

task checkstyle(type: Checkstyle) {
    configFile file('config/checkstyle/checkstyle.xml')
    source 'src/main/java'
    include '**/*.java'
    classpath = files()
}

task findbugsWrapper(dependsOn: 'findbugs') {}
task pmdWrapper(dependsOn: 'pmd') {}
task checkstyleWrapper(dependsOn: 'checkstyle') {}

build.dependsOn findbugsWrapper
check.dependsOn pmdWrapper
check.dependsOn checkstyleWrapper

dependencies {
    implementation "androidx.appcompat:appcompat:${rootProject.ext.androidxAppCompatVersion}"
    testImplementation "junit:junit:${rootProject.ext.junitVersion}"

    api "com.squareup.okhttp3:okhttp:${rootProject.ext.okhttpVersion}"
    api "com.squareup.okhttp3:logging-interceptor:${rootProject.ext.okhttpLogVersion}"
    api "com.google.code.gson:gson:${rootProject.ext.gsonVersion}"

    annotationProcessor "com.ryanharter.auto.value:auto-value-gson:${rootProject.ext.autoValueGsonVersion}"
    compileOnly "com.ryanharter.auto.value:auto-value-gson:${rootProject.ext.autoValueGsonVersion}"
    annotationProcessor "com.ryanharter.auto.value:auto-value-parcel:${rootProject.ext.autoValueParcelVersion}"

    androidTestImplementation "com.android.support.test:runner:${rootProject.ext.testRunnerVersion}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${rootProject.ext.testEspressoVersion}"

    testImplementation 'com.google.truth:truth:0.28'
    testImplementation 'org.mockito:mockito-core:2.21.0'
}
