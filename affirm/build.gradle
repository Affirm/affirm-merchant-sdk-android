import com.github.spotbugs.snom.SpotBugsTask

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'pmd'
apply plugin: 'com.github.spotbugs'
apply plugin: 'checkstyle'
apply from: 'maven-push.gradle'

ext {
    androidxAppCompatVersion = '1.0.2'
    junitVersion = "4.12"
    testRunnerVersion = "1.2.0"
    testEspressoVersion = "3.0.2"
    okhttpVersion = '3.14.1'
    gsonVersion = '2.8.5'
    playServiceAuthVersion = '17.0.0'
    autoValueGsonVersion = '0.4.6'
    autoValueParcelVersion = '0.2.5'
    truthVersion = '0.28'
    mockitoCoreVersion = '2.21.0'
    robolectricVersion = '4.1'
}
def VERSION_CODE = 3

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode VERSION_CODE.toInteger()
        versionName project.VERSION_NAME

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    lintOptions {
        disable 'ContentDescription', 'Instantiatable'
    }
}

pmd {
    toolVersion = '6.10.0'
}

spotbugs {
    toolVersion = "3.1.10"
}

checkstyle {
    toolVersion = '7.3'
}

task spotbugsTask(type: SpotBugsTask) {
    excludeFilter = file('config/spotbugs/exclude.xml')
    classes = fileTree("$project.buildDir/intermediates/javac")
    sourceDirs = fileTree('src/main/java')
    auxClassPaths = files()
    effort = "max"
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task pmd(type: Pmd) {
    ruleSets = ["java-android",
                "java-basic",
                "java-braces",
                "java-strings",
                "java-unnecessary",
                "java-unusedcode",
                "java-sunsecure"]
    source = fileTree('src/main/java')
}

task checkstyle(type: Checkstyle) {
    configFile file('config/checkstyle/checkstyle.xml')
    source 'src/main/java'
    include '**/*.java'
    classpath = files()
}

task spotbugsWrapper(dependsOn: 'spotbugsTask') {}
task pmdWrapper(dependsOn: 'pmd') {}
task checkstyleWrapper(dependsOn: 'checkstyle') {}

build.dependsOn spotbugsWrapper
check.dependsOn pmdWrapper
check.dependsOn checkstyleWrapper

dependencies {
    implementation "androidx.appcompat:appcompat:${androidxAppCompatVersion}"
    implementation "androidx.constraintlayout:constraintlayout:2.0.1"
    implementation "androidx.gridlayout:gridlayout:1.0.0"
    implementation "org.joda:joda-money:0.12"
    implementation "com.google.android.material:material:1.2.1"
    testImplementation "junit:junit:${junitVersion}"

    api "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    api "com.google.code.gson:gson:${gsonVersion}"

    implementation "com.google.android.gms:play-services-auth:${playServiceAuthVersion}"

    annotationProcessor "com.ryanharter.auto.value:auto-value-gson:${autoValueGsonVersion}"
    compileOnly "com.ryanharter.auto.value:auto-value-gson:${autoValueGsonVersion}"
    annotationProcessor "com.ryanharter.auto.value:auto-value-parcel:${autoValueParcelVersion}"

    androidTestImplementation "androidx.test:runner:${testRunnerVersion}"

    testImplementation "org.robolectric:robolectric:${robolectricVersion}"
    testImplementation "com.google.truth:truth:${truthVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoCoreVersion}"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
repositories {
    mavenCentral()
}
