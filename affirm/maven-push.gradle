apply plugin: 'maven'
apply plugin: 'signing'
apply from: 'publish-parameters.gradle'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://central.sonatype.com/repository/maven-snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    //task androidJavadocs(type: Javadoc) {
    //source = android.sourceSets.main.allJava
    //}

    //task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    //classifier = 'javadoc'
    //from androidJavadocs.destinationDir
    //}

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
    }

    task uploadToPortal {
        doLast {
            if (!isReleaseBuild()) {
                println "SNAPSHOT version detected (${VERSION_NAME}). SNAPSHOTs are published directly and don't need Portal upload."
                return
            }
            
            def publishingType = project.hasProperty('publishing_type') ? project.property('publishing_type') : 'user_managed'
            
            println "RELEASE version detected (${VERSION_NAME}). Uploading to Central Portal with publishing_type: ${publishingType}"
            
            def command = [
                'curl', '-X', 'POST',
                "https://ossrh-staging-api.central.sonatype.com/manual/upload/defaultRepository/${GROUP}?publishing_type=${publishingType}",
                '-H', 'Content-Type: application/json',
                '-H', "Authorization: Bearer ${java.util.Base64.encoder.encodeToString("${getRepositoryUsername()}:${getRepositoryPassword()}".bytes)}",
                '-d', '{}'
            ]
            
            def process = command.execute()
            process.waitFor()
            
            if (process.exitValue() == 0) {
                println "Successfully uploaded to Central Portal"
                println process.text
            } else {
                println "Error uploading to Central Portal:"
                println process.err.text
            }
        }
    }
}